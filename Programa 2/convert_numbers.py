# -*- coding: utf-8 -*-
"""Conversor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zqm39x8zyxpwFnnjiG5cpBfug9qaWEsI
"""

import sys
import time

def leer_archivo(ruta_archivo):
    """Recibe un archivo con datos numéricos excluyendo los valores diferentes con una excepción.

    Parámetro(s):
        ruta_archivo (str): La ruta del archivo a leer.

    Salida(s):
        Una lista de valores numéricos o None si detecta algún error.
    """
    try:
        with open(ruta_archivo, 'r', encoding='utf-8') as file:
            datos = [line.strip() for line in file.readlines()]
        return datos
    except FileNotFoundError:
        print(f"No se encontró el archivo '{ruta_archivo}' indicado.")
        return None
    except PermissionError:
        print("No posee permiso para abrir el archivo.")
        return None
    except UnicodeDecodeError:
        print("No se puede abrir el archivo, revise la codificación.")
        return None

def convertir_numeros(datos):
    """Recibe una lista con valores numéricos y los convierte a base binaria y hexadecimal.

    Parámetro(s):
        datos (double): Listado con valores numéricos.

    Salida(s):
        La lista numérica con valores binarios, hexadecimales y el tiempo utilizado en su ejecución.
    """
    if datos is None:
        return None

    hora_inicio = time.time()

    valores_binarios = []
    valores_hex = []

    for item in datos:
        try:
            numero = int(float(item))  # Convertir a entero antes de convertir a binario
            valores_binarios.append(bin(numero)[2:])
            valores_hex.append(hex(numero)[2:])
        except ValueError:
            print(f"Error convirtiendo '{item}' a número. Omitiendo.")

    tiempo_transcurrido = time.time() - hora_inicio

    return valores_binarios, valores_hex, tiempo_transcurrido

def crear_archivo_resultados(datos, resultados_binarios, resultados_hex, tiempo_transcurrido):
    """Crea un archivo plano con los resultados generados durante el proceso de conversión.

    Parámetro(s):
        Listado con valores numéricos originales, listado con valores binarios convertidos,
	      listado con valores hexadecimales convertidos y tiempo transcurrido.

    Salida(s):
        Archivo plano creado bajo el nombre ConversionResults.txt con los valores convertidos.
    """
    with open("ConversionResults.txt", 'w', encoding='utf-8') as file:
        file.write("Conversiones ejecutadas:\n")
        file.write("Decimal\tBinary\tHexadecimal\n")
        for decimal, binario, hexadecimal in zip(datos, resultados_binarios, resultados_hex):
            file.write(f"{decimal}\t{binario}\t{hexadecimal}\n")
        file.write(f"Tiempo transcurrido: {tiempo_transcurrido} segundos\n")

def main():
    """Función principal que integrará la lógica y se ejecutará al correr el programa"""
    if len(sys.argv) != 2:
        print("Utilice el comando de ejecución: python convertNumbers.py fileWithData.txt")
        sys.exit(1)

    ruta_archivo = sys.argv[1]
    datos = leer_archivo(ruta_archivo)

    if datos is not None:
        resultados_binarios, resultados_hex, tiempo_transc = convertir_numeros(datos)

        if resultados_binarios and resultados_hex:
            print("Conversiones ejecutadas:")
            print("Decimal\tBinary\tHexadecimal")
            for decimal, binario, hexadecimal in zip(datos, resultados_binarios, resultados_hex):
                print(f"{decimal}\t{binario}\t{hexadecimal}")
            print(f"Tiempo transcurrido: {tiempo_transc} segundos")

            crear_archivo_resultados(datos, resultados_binarios, resultados_hex, tiempo_transc)

if __name__ == "__main__":
    main()
